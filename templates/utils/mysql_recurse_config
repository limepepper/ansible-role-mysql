#!/usr/bin/python


import subprocess
import os
import os.path
from termcolor import colored
from termcolor import colored, cprint

print_red_on_cyan = lambda x: cprint(x, 'red', 'on_cyan')
print_blue_on_white = lambda x: cprint(x, 'blue', 'on_white')



def parse_default_configs():

  for file in ['/etc/my.cnf', '/etc/mysql/my.cnf', '~/.my.cnf']:
    indent=0
    recurse_into_config(file, indent)

def recurse_into_config(filename, indent):

  indent = indent + 1
  if os.path.exists(filename):
    pr_info("parsing file {} ".format(filename), indent)
    with open(filename) as f:
      content = f.readlines()
      # you may also want to remove whitespace characters like `\n` at the end of each line
      content = [x.strip() for x in content]
      for c in content:
        parse_line_from_config(c, indent)
  else:
    pr_warn("file {} does not exist".format(filename), indent)


def parse_line_from_config(config_line, indent):
  config_line = config_line.lstrip()
  if config_line.startswith('#'):
    return
  elif config_line.strip() == '':
    return
  elif config_line.startswith('#'):
    return
  #pr_debug("line is " + config_line, indent)
  elif config_line.startswith('!includedir'):
    pr_info("incuding directory", indent)
    tokens = config_line.split(' ', 1)
    loop_directory(tokens[1], indent)
  elif config_line.startswith('!include'):
    tokens = config_line.split(' ', 1)
    pr_info("found file to inculde" + tokens[1], indent)
    recurse_into_config(tokens[1], indent)
  else:
    pr_debug("line: " + config_line, indent)



def loop_directory(dirpath, indent):
    pr_debug("token is "+dirpath, indent)
    for file in os.listdir(dirpath):
      if file.endswith(".cnf"):
          recurse_into_config(os.path.join(dirpath, file), indent)

  # if [[ "$var" =~ ^!includedir ]] ; then


def parse_mysqld_default_variables():
  command = 'mysqld  --help --verbose'
  lines = subprocess.check_output( command, shell=True).split("\n")

  toggle = False

  for line in lines:
    if line.startswith('Variables (--variable-name=value)'):
      toggle = not toggle
    if not toggle:
      continue
    pr_debug("line is .... {}".format(line), indent)

#line is ....
#line is .... The following groups are read: mysqld server mysqld-10.3 mariadb mariadb-10.3 client-server galera

def pr_warn(message, indent=0):
  print("")
  print_red_on_cyan(indent*' ' +message)
  print("")

def pr_info(message, indent=0):
  print_blue_on_white(indent*' ' +message)

def pr_debug(message, indent=0):
  print( indent*' ' +  message)

parse_default_configs()