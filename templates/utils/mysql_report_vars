#!/bin/bash

bufferstring=""

ev()
{
  varname="$1"
  #let bufferstring
  bufferstring="${bufferstring}\n$1=${!varname}"
}

show_var()
{
  varname="$1"
  echo "$1=${!varname}"
}

function main()
{

source $DIR/mysql_platform_detect

ev DIR
#{{ ansible_pkg_mgr }}
ev HOSTVAR_OS_DISTRIBUTION
ev HOSTVAR_OS_MAJOR_VERSION
ev HOSTVAR_OS_VERSION
ev HOSTVAR_OS_FAMILY

# MYSQL_PKGS=$(pkg_search_names '^mysql-')
# MARIA_PKGS=$(pkg_search_names '^maria-')

# echo "MySQL packages:"
# echo "$MYSQL_PKGS"
# echo "Maria packages:"
# echo "$MARIA_PKGS"

#
#   __   ____ _ _ __ ___
#   \ \ / / _` | '__/ __|
#    \ V / (_| | |  \__ \
#     \_/ \__,_|_|  |___/
#

# parse relevamt mysql values from the running environment

#set -x

if \which mysqld >/dev/null 2>&1 ; then
  MYSQL_MYSQLD="$(\which mysqld | tail -1)"
elif netstat -lntp 2>/dev/null | grep LISTEN | grep 3306 >/dev/null 2>&1 && \
      ps -ef | grep mysqld | egrep '^mysql'   >/dev/null 2>&1 ; then
  MYSQL_MYSQLD="$(ps -ef | grep mysqld | grep -v /usr/bin/mysqld_safe | \
  egrep '^mysql' | tr -s ' ' |cut -d' ' -f 8)"
else
# speculatively search for packages on the system
  PKG_LIST=$(pkg_search_names '*mysql-server-|*mariadb-server-')

  echo "$(echo -e "$PKG_LIST" | wc -l)"

#REGEX="Starts the M[A-Za-0-9]+ database server"

  [[ $(echo -e "$PKG_LIST" | wc -l) -gt 0 ]] && \
  #[[ -n "$PKG_LIST" ]] && \
  {
     while read PKG
    do
      while read var
      do
      [[ ! -d "$var" ]] && \
      [[ -s "$var" ]] && \
      [[ -x "$var" ]] && \
      "$var"  --help --verbose | egrep 'Starts the M[A-Za-z0-9]+ database server'  && \
      MYSQL_MYSQLD="$var" && break || \
      echo "not found $var"

      done < <(rpm -qil "$PKG" | \
        egrep '/mysqld$')

    done <<< $PKG_LIST

  }

  [[ -x "$MYSQL_MYSQLD" ]] || \
  {
  echo not able to find mysqld command
  exit 99
  }
fi

#set +x

show_var MYSQL_MYSQLD

MYSQL_PIDFILE=$(${MYSQL_MYSQLD} --verbose --help 2>/dev/null | \
          egrep ^pid-file | \
          awk '{print $2}' 2>/dev/null  )

show_var MYSQL_PIDFILE

if cat $MYSQL_PIDFILE >/dev/null 2>&1 ; then
  MYSQL_PID=$(cat $MYSQL_PIDFILE)
elif sudo cat $MYSQL_PIDFILE >/dev/null 2>&1 ; then
  MYSQL_PID=$(sudo cat $MYSQL_PIDFILE)
else
  echo not able to find MYSQL_PIDFILE
  pr_warn "possibly the service failed to start"
fi

show_var MYSQL_PID

ev MYSQL_MYSQLD
ev MYSQL_PID
ev MYSQL_PIDFILE

pr_head <<'EOHEAD'
#                              _     _
#    _ __ ___  _   _ ___  __ _| | __| |
#   | '_ ` _ \| | | / __|/ _` | |/ _` |
#   | | | | | | |_| \__ \ (_| | | (_| |
#   |_| |_| |_|\__, |___/\__, |_|\__,_|
#              |___/        |_|
EOHEAD

 mysqld_variables_tmpfile=$(mktemp /tmp/mysqld-variables.XXXXXX)

echo $mysqld_variables_tmpfile

 { ${MYSQL_MYSQLD} --help --verbose | \
     egrep ^$serverval > $mysqld_variables_tmpfile ; } 2>/dev/null

cat $mysqld_variables_tmpfile | wc -l

[[ -s "$mysqld_variables_tmpfile" ]] && \
{

for serverval in init-file \
    plugin-dir \
    auth-socket \
    basedir \
    bind-address \
    connect-timeout \
    daemonize \
    datadir \
    default-authentication-plugin \
    default-password-lifetime \
    default-storage-engine \
    event-scheduler \
    general-log \
    general-log-file \
    init-file \
    initialize-insecure \
    local-infile \
    log-bin \
    long-query-time \
    old-passwords \
    pid-file \
    report-host \
    require-secure-transport \
    server-id \
    secure-auth \
    safe-user-create \
    skip-grant-tables \
    socket \
    slow-query-log \
    slow-query-log-file \
    sql-mode \
    ssl \
    symbolic-links \
    tmpdir \
    verbose \
    version \
    version-ssl-library ; do
    {
    #  echo looking up $serverval
    # #declare "magic_variable_$1=$(ls | tail -1)"
       dyname="MYSQLD_VARS_$(echo $serverval | tr '[a-z]' '[A-Z]'| tr '-' '_')"
     #  echo dyname: $dyname
       dyval="$( { cat $mysqld_variables_tmpfile | \
     egrep "^$serverval\s+" | tr -s ' ' | cut -d' ' -f2- ; } 2>/dev/null )"
    #  echo dyval: $dyval
     declare "$dyname=$dyval"
     ev $dyname


     }
 done
} || \
{
  echo "${RED}COULDN'T GET SERVER VARS FROM ${MYSQL_MYSQLD} ${RESET}"
  exit 99
}



[[ -z "${MYSQLD_VARS_VERSION}" ]] && \
{

  echo "no string in --variables, trying direction --version request"

MYSQLD_VARS_VERSION_RAW=$( ${MYSQL_MYSQLD} --version 2>/dev/null )
MYSQLD_VARS_VERSION=$( ${MYSQL_MYSQLD} --version 2>/dev/null | tr -s ' ' | \
        _ver  | cut -d' ' -f3)

      ev MYSQLD_VARS_VERSION
      ev MYSQLD_VARS_VERSION_RAW
}

echo -e "$bufferstring"

pr_head <<'EOHEAD'
# #        _             _                      _     _
# #    ___| |_ __ _ _ __| |_ _   _ _ __     ___| |__ | | _____
# #   / __| __/ _` | '__| __| | | | '_ \   / __| '_ \| |/ / __|
# #   \__ \ || (_| | |  | |_| |_| | |_) | | (__| | | |   <\__ \
# #   |___/\__\__,_|_|   \__|\__,_| .__/   \___|_| |_|_|\_\___/
# #                               |_|

EOHEAD

echo -n "${MAGENTAFG}defaults invocation is:${RESET}"

echo "${MYSQL_MYSQLD}"
while read -d ' ' var
do
  echo "    $var   "

done < <( ${MYSQL_MYSQLD}  --print-defaults | tail -n +2 2>/dev/null )

echo ""
echo "${BLUE}Startup Options${RESET}"
echo -n "${MAGENTAFG}files: ${RESET}"
{ ${MYSQL_MYSQLD} --verbose --help | \
  grep -A1 'Default options are read from the following files' | tail -1; }  2>/dev/null

echo ""

STARTUP_FILES=$( { ${MYSQL_MYSQLD} --verbose --help | \
  grep -A1 'Default options are read from the following files' | tail -1; }  2>/dev/null )

eval set -- "$STARTUP_FILES"
for start_file in "$@"
do
  recursively_check "$start_file"
done


pr_head <<'EOHEAD'
##    ___       _ _     ____   ___  _
##   |_ _|_ __ (_) |_  / ___| / _ \| |
##    | || '_ \| | __| \___ \| | | | |
##    | || | | | | |_   ___) | |_| | |___
##   |___|_| |_|_|\__| |____/ \__\_\_____|
##
EOHEAD

[[ -f ${MYSQLD_VARS_INIT_FILE} ]] && \
cat ${MYSQLD_VARS_INIT_FILE}


#echo -e "$bufferstring"
#exit 90

pr_head <<'EOHEAD'
#                               _
#     _ __ ___  _   _ ___  __ _| |
#    | '_ ` _ \| | | / __|/ _` | |
#    | | | | | | |_| \__ \ (_| | |
#    |_| |_| |_|\__, |___/\__, |_|
#               |___/        |_|

EOHEAD

  /usr/bin/which mysql && [ -f `/usr/bin/which mysql` ] && \
  {
      echo "mysql client indicates version: '$(mysql -V)'"
      echo "mysql "

      echo "SELECT User from mysql.user;" | mysql  >/dev/null 2>&1  && \
      {
       echo "we are able to login, so using mysql to find more..."
      mysql  -e "SHOW VARIABLES LIKE 'version';"

      mysql  -e "SELECT VERSION();"

pr_head <<'EOHEAD'
#       _         _   _             _             _
#      / \  _   _| |_| |__    _ __ | |_   _  __ _(_)_ __  ___
#     / _ \| | | | __| '_ \  | '_ \| | | | |/ _` | | '_ \/ __|
#    / ___ \ |_| | |_| | | | | |_) | | |_| | (_| | | | | \__ \
#   /_/   \_\__,_|\__|_| |_| | .__/|_|\__,_|\__, |_|_| |_|___/
#                            |_|            |___/
EOHEAD

echo "Authentication plugins are"
mysql << EOSQL
SELECT PLUGIN_NAME, PLUGIN_STATUS, PLUGIN_TYPE        FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_TYPE = 'AUTHENTICATION'    ;
EOSQL

echo "Plugins enabled in mysql.plugins"
mysql << EOSQL
select * from mysql.plugin;
EOSQL

      } || \
       {
         echo unable to login using $ mysql

       }
  }

pr_head <<'EOHEAD'
##    ____              _  __     __    _ _     _       _   _
##   |  _ \__      ____| | \ \   / /_ _| (_) __| | __ _| |_(_) ___  _ __
##   | |_) \ \ /\ / / _` |  \ \ / / _` | | |/ _` |/ _` | __| |/ _ \| '_ \
##   |  __/ \ V  V / (_| |   \ V / (_| | | | (_| | (_| | |_| | (_) | | | |
##   |_|     \_/\_/ \__,_|    \_/ \__,_|_|_|\__,_|\__,_|\__|_|\___/|_| |_|
##
EOHEAD

echo "validation plugin status  (INFORMATION_SCHEMA.PLUGINS)"

mysql  --table   --column-names << EOSQL || { echo "couldn't run query" && exit 99; }
SELECT PLUGIN_NAME, PLUGIN_STATUS, PLUGIN_TYPE        FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_TYPE = 'VALIDATE PASSWORD'    ;
EOSQL

echo ""
echo "validation plugin status  (mysql.plugin table)"

mysql  --table   --column-names << EOSQL || { echo "couldn't run query" && exit 99; }
SELECT
    name,
    dl
FROM
    mysql.plugin
WHERE name = 'validate_password'
AND dl = 'validate_password.so';

EOSQL

echo ""

pr_head <<'EOHEAD'
#                              _           _           _
#    _ __ ___  _   _ ___  __ _| | __ _  __| |_ __ ___ (_)_ __
#   | '_ ` _ \| | | / __|/ _` | |/ _` |/ _` | '_ ` _ \| | '_ \
#   | | | | | | |_| \__ \ (_| | | (_| | (_| | | | | | | | | | |
#   |_| |_| |_|\__, |___/\__, |_|\__,_|\__,_|_| |_| |_|_|_| |_|
#              |___/        |_|
EOHEAD

  /usr/bin/which mysqladmin && [ -f `/usr/bin/which mysqladmin` ] && \
  {
      echo "found mysqladmin at $(/usr/bin/which mysqladmin | tail -1)"

      mysqladmin variables | egrep 'version'  >/dev/null 2>&1   && \
      {
       echo "we are able to use mysql admin, so using it to find more..."
       echo "init file"
      mysqladmin variables | egrep 'init-file'
    #  echo "start"
    #  mysqladmin variables | egrep 'start'
      echo "my.cnf"
      mysqladmin variables | egrep 'my.cnf'


      # echo process list
      # mysqladmin processlist
      # echo extended status
      # mysqladmin extended-status
      # echo debug
      # mysqladmin debug


      } || \
       {
         echo unable to login using $ mysql

       }
  }


#echo -e "$bufferstring"

}

recursively_check()
{
  start_file=$1

  echo "start file is ${start_file}"

  sudo -u mysql stat "$start_file" >/dev/null 2>&1  || \
  {
    for ((i=0; i<(( ((indent)) * 2 )) ; i++)); do  echo -n " ";   done
    pr_alert "Can't stat:  $start_file "
  }


  local indent=${2-0}

  #  for ((i=0; i<(( ((indent)) * 2 )) ; i++)); do  echo -n " ";   done
  #echo ${CYANFG}indent is $indent  ${RESET}
  [[ -f "$start_file" ]] && \
  {
    for ((i=0; i<(( ((indent)) * 2 )) ; i++)); do  echo -n " ";   done
    echo -n "${POWDER_BLUE}$start_file${RESET}, "
    echo -n "(exists!) has lines: $(wc -l $start_file)"
    echo ""

    #for ((i=0; i<(( ((indent)) * 2 )) ; i++)); do  echo -n " ";   done


    while read var
    do
      # echo "variable: $var"
      if [[ "$var" =~ ^!includedir ]] ; then

        for ((i=0; i<(( ((indent)) * 2 )) ; i++)); do  echo -n " ";   done

        echo "${GREEN}${var}${RESET}"
        echo ""
        #echo contents of that is
        dirname="$( echo "$var" | tr -s ' ' | cut -d' ' -f2 )"
        # for ((i=0; i<(( ((indent+1)) * 2 )) ; i++)); do  echo -n " ";   done
        # echo dirname is $dirname

        for filename in $dirname/*.cnf; do
            #for ((i=0; i<(( ((indent+1)) * 2 )) ; i++)); do  echo -n " ";   done
            #echo $filename
            recursively_check $filename $(( indent+1 ))
        done

    # for ((i=0; i<=3; i++)); do
    #     ./MyProgram.exe "$filename" "Logs/$(basename "$filename" .txt)_Log$i.txt"
    # done
      elif  [[ "$var" =~ ^!include$ ]] ; then
        filename="$( echo "$var" | tr -s ' ' | cut -d' ' -f2 )"
        recursively_check $filename $(( indent+1 ))

      elif  [[ "$var" =~ ^init_file= ]] ; then
        filename="$( echo "$var" | cut -d'=' -f2 | sed -e 's/^[ \t]*//' )"
        filename="${filename%\"}"
        filename="${filename#\"}"

        for ((i=0; i<(( ((indent)) * 2 )) ; i++)); do  echo -n " ";   done
        printval "${var}"
        for ((i=0; i<(( ((indent)) * 2 )) ; i++)); do  echo -n " ";   done
        echo "SQL content .===>>>"
        print_sql_file ${filename}
      else
          for ((i=0; i<(( ((indent)) * 2 )) ; i++)); do  echo -n " ";   done
          printval "${var}"

      fi


      #((total+=var))
    done < <(cat $start_file | egrep -v '^\s*$|^\s*#')
        echo ${CYANFG}${RESET}

  } || \
  {
    echo "file not exist $start_file"
  }
}

print_sql_file()
{

  [[ $# > 0 ]] && \
  {
    sql_file=$1

    echo -en "${PINK}${WHITEBG}"
    cat ${sql_file}
    echo -en "${RESET}"
    echo

  }

}


pr_warn()
{

  [[ $# > 0 ]] && \
  {
    line=$1

       echo -en "${PINK}${WHITEBG}"
       printf "%s" "${line:0:80}"
       echo -en "${RESET}"
       echo

  } || \
  {
  while read -r  line; do
      # printf "%s" "$data"
       echo -en "${PINK}"
       printf "%s" "${line:0:80}"
       echo -en "${RESET}"
       echo
  done

  }

}



pr_alert()
{

  [[ $# > 0 ]] && \
  {
    line=$1

       echo -en "${RED}${WHITEBG}"
       printf "%s" "${line:0:80}"
       echo -en "${RESET}"
       echo

  } || \
  {
  while read -r  line; do
      # printf "%s" "$data"
       echo -en "${RED}"
       printf "%s" "${line:0:80}"
       echo -en "${RESET}"
       echo
  done

  }
# ansi chars line wrapping screws things up.
}

pr_head()
{

  while read -r  line; do
      # printf "%s" "$data"
       echo -en "${RED}"
       printf "%s" "${line:0:80}"
       echo -en "${RESET}"
       echo
  done
# ansi chars line wrapping screws things up.
}


printval()
{
  msg=$1
  char='='

  if [[ $(awk -F"${char}" '{print NF-1}' <<< "$msg") -eq 1 ]] ; then
  #echo hee11
      echo "${MAGENTAFG}${msg%%=*}${RESET}=${BLUE}${msg##*=}${RESET}"
      #${stringZ#a*C}
   #   echo hee
  elif [[ "$msg" =~ ^vdvrergv$ ]] ;then
      echo "${BLUEFG}${msg}${RESET}"
  echo rgjerigo
  elif [[ "joijij2" == "joijio"  ]] ;then
echo rgjerigo
  else
   echo "${YELLOWFB}${msg}${RESET}"
  fi
}

# Define a few Colours
    BLACKFG=$(tput setaf 0)
    BLACKBG=$(tput setab 0)
        RED=$(tput setaf 1)
       PINK=$(tput setaf 134)
      REDFG=$(tput setaf 1)
      REDBG=$(tput setab 1)
      GREEN=$(tput setaf 2)
    GREENFG=$(tput setaf 2)
    GREENBG=$(tput setab 2)
   YELLOWFB=$(tput setaf 3)
   YELLOWBG=$(tput setab 3)
       BLUE=$(tput setaf 4)
     BLUEFG=$(tput setaf 4)
     BLUEBG=$(tput setab 4)
  MAGENTAFG=$(tput setaf 5)
  MAGENTABG=$(tput setab 5)
     CYANFG=$(tput setaf 6)
     CYANBG=$(tput setab 6)
    WHITEFG=$(tput setaf 7)
    WHITEBG=$(tput setab 7)
     PURPLE=$(tput setaf 8)
  DEFAULTFG=$(tput setaf 9)
  DEFAULTBG=$(tput setab 9)
      RESET=$(tput sgr0)
    PURPLE2=$(tput setaf 125)
      BLINK=$(tput blink)
    REVERSE=$(tput smso)
  UNDERLINE=$(tput smul)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)

# get current source dir, even if its hidden in links
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"



# read the options
TEMP=`getopt -o a::bc: --long arga::,argb,argc: -n 'test.sh' -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -a|--arga)
            case "$2" in
                "") ARG_A='some default value' ; shift 2 ;;
                *) ARG_A=$2 ; shift 2 ;;
            esac ;;
        -b|--argb) ARG_B=1 ; shift ;;
        -c|--argc)
            case "$2" in
                "") shift 2 ;;
                *) ARG_C=$2 ; shift 2 ;;
            esac ;;
        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

main