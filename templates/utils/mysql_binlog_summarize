#!/bin/bash


binlog_basename="$(mysql --batch  --skip-column-names  -e 'SELECT @@GLOBAL.log_bin_basename;')"

binlog_current="$(tail -1 ${binlog_basename}.index)"
extension="${binlog_current##*.}"

START_TIME="$(date +"%Y-%m-%d %H:%M:%S" --date="3 minutes ago")"
STOP_TIME="$(date +"%Y-%m-%d %H:%M:%S")"

mysqlbinlog --base64-output=decode-rows \
              -vv \
          --start-datetime="${START_TIME}"  \
          --stop-datetime="${STOP_TIME}" \
            ${binlog_basename}.${extension}

main()
{

mysqlbinlog --base64-output=decode-rows \
              -vv \
          --start-datetime="${START_TIME}"  \
          --stop-datetime="${STOP_TIME}" \
            ${binlog_basename}.${extension}   | \
            awk \
'BEGIN {s_type=""; s_count=0;count=0;insert_count=0;update_count=0;delete_count=0;flag=0;} \
{if(match($0, /#15.*Table_map:.*mapped to number/)) {printf "Timestamp : " $1 " " $2 " Table : " $(NF-4); flag=1} \
else if (match($0, /(### INSERT INTO .*..*)/)) {count=count+1;insert_count=insert_count+1;s_type="INSERT"; s_count=s_count+1;}  \
else if (match($0, /(### UPDATE .*..*)/)) {count=count+1;update_count=update_count+1;s_type="UPDATE"; s_count=s_count+1;} \
else if (match($0, /(### DELETE FROM .*..*)/)) {count=count+1;delete_count=delete_count+1;s_type="DELETE"; s_count=s_count+1;}  \
else if (match($0, /^(# at) /) && flag==1 && s_count>0) {print " Query Type : "s_type " " s_count " row(s) affected" ;s_type=""; s_count=0; }  \
else if (match($0, /^(COMMIT)/)) {print "[Transaction total : " count " Insert(s) : " insert_count " Update(s) : " update_count " Delete(s) : " \
delete_count "] \n+----------------------+----------------------+----------------------+----------------------+"; \
count=0;insert_count=0;update_count=0; delete_count=0;s_type=""; s_count=0; flag=0} } '

}



# get current source dir, even if its hidden in links
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"



# # read the options
# TEMP=`getopt -o a::bc: --long arga::,argb,argc: -n 'test.sh' -- "$@"`
# eval set -- "$TEMP"

# extract options and their arguments into variables.
# while true ; do
#     case "$1" in
#         -s|--start-datetime)
#             case "$2" in
#                 "") ARG_A='some default value' ; shift 2 ;;
#                 *) ARG_A=$2 ; shift 2 ;;
#             esac ;;
#         -e|--stop-datetime) ARG_B=1 ; shift ;;
#         --) shift ; break ;;
#         *) echo "Internal error!" ; exit 1 ;;
#     esac
# done

main



# Script source based on...
# https://www.percona.com/blog/2015/01/20/ ...
# identifying-useful-information-mysql-row-based-binary-logs/
#
#

#show variables like '%binlog_format%';

# SHOW BINARY LOGS;
# +-------------------------+-----------+
# | Log_name                | File_size |
# +-------------------------+-----------+
# | default-centos-7.000001 |       177 |
# | default-centos-7.000002 |      1065 |
# | default-centos-7.000003 |   4155757 |
# | default-centos-7.000004 |     18248 |
# | default-centos-7.000005 |  67198675 |
# +-------------------------+-----------+
# 5 rows in set (0.00 sec)

# force close of the current logfile and start a new one
# flush logs;